const id = "designing-a-programing-language.mdx";
						const collection = "blog";
						const slug = "designing-a-programing-language";
						const body = "\r\n# Riot Language specification\r\n\r\n## Data types\r\n\r\n| Type          | Definition  |\r\n| --------------- |------------- |\r\n| **Numbers**   | `int` , `float` , `bigint`, `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`, `f64`, `f128` |\r\n| **Strings**   | `str`, `char` |\r\n| **Booleans**  | `bool` |\r\n| **Objects**   | `list`, `object`, `func`, `tuple` |\r\n| **Empty**     | `void`, `unknown`, `none`, `undefined`, `any` |\r\n\r\n\r\n## Variables\r\n\r\n```ts {1-2,4}\r\n// normal variable\r\nvar num1 = 1\r\n\r\n// multiple variables\r\nvar num1, num2\r\n\r\n// multiple variables with value\r\nvar num2 = 2, num3 = 3\r\n\r\n// multiple variables with diferent type\r\nvar num4: int = 4, say: str = \"string\"\r\n  ```\r\n\r\n## Constants\r\n\r\n```ts\r\n// normal constant\r\nconst num1 = 1\r\n\r\n// multiple constants (initial value is required)\r\nconst num1: int = 1, num2: int = 2\r\n\r\n// multiple constants with diferent type\r\nconst num3: int = 3, say: str = \"string\"\r\n  ```\r\n\r\n## Tuple\r\n\r\n```ts\r\n// normal tuple\r\nvar tuple = (1, \"Hello\", true)\r\n\r\n// tuple with type\r\nvar tuple: tuple<int, str> = (1, \"Hello\")\r\n\r\n// tuple with other type declaration (recomended)\r\nvar otherTuple: (int, str) = (1, \"Hello\")\r\n```\r\n\r\n## Objects\r\n\r\n```ts\r\n// normal object\r\nvar obj = {\r\n  name: \"John\",\r\n  age: 20\r\n}\r\n\r\n// object with type\r\nvar obj: object = {\r\n  name: \"John\",\r\n  age: 20\r\n}\r\n\r\n// object with other type declaration (recomended)\r\ninterface Person {\r\n  name: str,\r\n  age: int\r\n}\r\n\r\nvar otherObj: Person = {\r\n  name: \"John\",\r\n  age: 20\r\n}\r\n\r\n// object with mixed types\r\nvar obj: object = {\r\n  name: \"John\",\r\n  age: 20,\r\n  sayHello: fn(): void -> print(\"Hello\")\r\n}\r\n\r\n// object with mixed types (recomended)\r\ninterface Person {\r\n  name: str,\r\n  age: int,\r\n  sayHello: () -> void \r\n}\r\n\r\nvar otherObj: Person = {\r\n  name: \"John\",\r\n  age: 20,\r\n  sayHello: fn(): void -> print(\"Hello\")\r\n}\r\n```\r\n\r\n## Lists\r\n\r\n```ts\r\n// normal list\r\nvar list = [1, 2, 3]\r\n\r\n// list with type\r\nvar listOfStrings: list<str> = [\"Hello\", \"World\"]\r\n\r\n// list with other type declaration (recomended)\r\nvar otherListOfStrings: srt[] = [\"Hello\", \"World\"]\r\n\r\n// list with mixed types\r\nvar mixedList: list<any> = [\"Hello\", 1, true]\r\n\r\n// list with mixed types (recomended)\r\nvar otherMixedList: any[] = [\"Hello\", 1, true]\r\n\r\n// list with multiple types\r\nvar multipleTypesList: list<int, str, bool> = [1, \"Hello\", true]\r\n\r\n// list with multiple types (recomended)\r\nvar otherMultipleTypesList: (int, str, bool)[] = [1, \"Hello\", true]\r\n```\r\n\r\n## Functions\r\n\r\n```rust\r\n// normal function\r\nfn sayHello() {\r\n  print(\"Hello\")\r\n}\r\n\r\n// function with parameters\r\nfn sayHello(name: str) {\r\n  print(\"Hello \" + name)\r\n}\r\n\r\n// function with return\r\nfn sayHello(name: str): str {\r\n  return \"Hello \" + name\r\n}\r\n\r\n// function with parameters and return\r\nfn sayHello(name: str, age: int): str {\r\n  return \"Hello \" + name + \", you are \" + age + \" years old\"\r\n}\r\n```\r\n\r\n## Arrow Functions\r\n\r\n```ts\r\n// normal arrow function (single line)\r\nvar sayHello = (): void -> print(\"Hello\")\r\n\r\n// normal arrow function (multiple lines)\r\nvar sayHello = (): void -> {\r\n  print(\"Hello\")\r\n  print(\"World\")\r\n}\r\n\r\n// anonymous function\r\nconst pet = {\r\n  getName: fn(): str {\r\n    return \"Dog\"\r\n  }\r\n}\r\n\r\n// anonymous arrow function\r\nconst person = {\r\n  getAge: (): int -> 20\r\n}\r\n\r\n// async/await is supported by default!!!\r\n\r\n// anonymous async function\r\nconst pet = {\r\n  getName: fn(): str {\r\n    await sleep(1000)\r\n    return \"Dog\"\r\n  }\r\n}\r\n\r\n// anonymous async arrow function\r\nconst person = {\r\n  getAge: (): int -> {\r\n    await sleep(1000)\r\n    return 20\r\n  }\r\n}\r\n\r\n// method style\r\nconst person = {\r\n  getAge (): int {\r\n    return 20\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Classes\r\n\r\n### Basic class\r\n\r\n```ts\r\nclass Person {\r\n  // constructor\r\n  constructor(name: str, age: int) {\r\n    this.name = name\r\n    this.age = age\r\n  }\r\n\r\n  // method\r\n  sayHello () {\r\n    print(\"Hello \" + this.name + \", you are \" + this.age + \" years old\")\r\n  }\r\n}\r\n\r\n// create object\r\nvar person = new Person(\"John\", 20)\r\n\r\n// with named parameters\r\n\r\nvar person = new Person(name: \"John\", age: 20)\r\n```\r\n\r\n### Static class\r\n```ts\r\nclass StaticClass {\r\n  // static method\r\n  static sayHello () {\r\n    print(\"Hello\")\r\n  }\r\n}\r\n```\r\n\r\n### No constructable class\r\n\r\n```ts\r\nclass NoConstructableClass {\r\n  // private constructor\r\n  public NoConstructableClass () {\r\n    return 'Hello World'\r\n  }\r\n}\r\n\r\n// create string of no constructable class\r\nconst message: str = NoConstructableClass()\r\n\r\nprint(message) // Hello world\r\n```\r\n\r\n## Inheritance\r\n\r\n```ts\r\nclass Person {\r\n  // constructor\r\n  constructor(name: str, age: int) {\r\n    this.name = name\r\n    this.age = age\r\n  }\r\n  // method\r\n  sayHello () {\r\n    print(\"Hello \" + this.name + \", you are \" + this.age + \" years old\")\r\n  }\r\n}\r\n\r\n// extend class Person\r\nclass Student extends Person {\r\n  // constructor\r\n  constructor(name: str, age: int, school: str) {\r\n    super(name, age)\r\n    this.school = school\r\n  }\r\n\r\n  // method\r\n  sayHello () {\r\n    print(\"Hello \" + this.name + \", you are \" + this.age + \" years old and you study in \" + this.school)\r\n  }\r\n}\r\n\r\n// extends multiple classes\r\n\r\nclass StudentWithFriends extends Person, Student {\r\n  // constructor\r\n  constructor(name: str, age: int, school: str) {\r\n    super.Person(name, age)\r\n    super.Student(name, age, school)\r\n  }\r\n\r\n  // method\r\n  sayHello () {\r\n    print(\"Hello \" + this.name + \", you are \" + this.age + \" years old and you study in \" + this.school)\r\n  }\r\n}\r\n```\r\n\r\n## Interfaces\r\n\r\n```ts\r\ninterface Person {\r\n  name: str\r\n  age: int\r\n  readonly constructor (name: str, age: int)\r\n}\r\n\r\n// implements interface\r\nclass Student implements Person {\r\n  name: str\r\n  age: int\r\n  constructor(name: str, age: int) {\r\n    this.name = name\r\n    this.age = age\r\n  }\r\n\r\n// method\r\n  sayHello () {\r\n    print(\"Hello \" + this.name + \", you are \" + this.age + \" years old\")\r\n  }\r\n}\r\n```\r\n\r\n## Generics\r\n\r\n```rs\r\n// generic function\r\nfn sayHello<T>(name: T): T {\r\n  return \"Hello \" + name\r\n}\r\n```\r\n\r\n```ts\r\n// use generic function\r\n\r\nconst name: str = sayHello<str>(\"John\")\r\n\r\n// generic arrow function\r\n\r\nvar sayHello = <T>(name: T): T -> \"Hello \" + name\r\n\r\n// use generic arrow function\r\nvar name: str = sayHello<str>(\"John\")\r\n```\r\n\r\n# in progress...";
						const data = {title:"Dise침ando un lenguaje de programaci칩n enfocado en la experiencia de desarrollo",tags:["lenguaje","programaci칩n","dise침o","experiencia","desarrollo"]};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/Carlo/dev/coatl.in/src/content/blog/designing-a-programing-language.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
